/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

#pragma once

#include "KBECommon.h"

namespace KBEngine
{


// defined in */scripts/entity_defs/types.xml

typedef uint8 UINT8;

typedef uint16 UINT16;

typedef uint64 UINT64;

typedef uint32 UINT32;

typedef int8 INT8;

typedef int16 INT16;

typedef int32 INT32;

typedef int64 INT64;

typedef FString STRING;

typedef FString KBE_UNICODE;

typedef float FLOAT;

typedef double DOUBLE;

typedef TArray<uint8> PYTHON;

typedef TArray<uint8> PY_DICT;

typedef TArray<uint8> PY_TUPLE;

typedef TArray<uint8> PY_LIST;

typedef TArray<uint8> ENTITYCALL;

typedef TArray<uint8> BLOB;

typedef FVector2D VECTOR2;

typedef FVector VECTOR3;

typedef FVector4 VECTOR4;

typedef uint64 DBID;

typedef uint8 BOOL;

typedef int32 ENTITY_ID;

class ENTITY_LIST : public TArray<int32>
{
public:

	ENTITY_LIST()
	{
	}

};

inline bool operator ==(const ENTITY_LIST& a, const ENTITY_LIST& b)
{
	return a == b;
};

typedef uint8 BAG_TYPE;

typedef uint8 BLOCK_ID;

typedef uint8 REDUCE_RES;

typedef uint8 GOOD_TYPE;

typedef uint8 GOOD_ID;

typedef uint8 KIND_ID;

class ROLE_DATA
{
public:
	int8 DataType;
	TArray<uint8> DataValue;

	ROLE_DATA():
	DataType(0),
	DataValue()
	{
	}

};

inline bool operator ==(const ROLE_DATA& a, const ROLE_DATA& b)
{
	return a.DataType == b.DataType && a.DataValue == b.DataValue;
};

class ROLE_INFO
{
public:
	uint64 Dbid;
	FString Name;
	uint8 RoleType;
	ROLE_DATA Data;

	ROLE_INFO():
	Dbid(0),
	Name(),
	RoleType(0),
	Data()
	{
	}

};

inline bool operator ==(const ROLE_INFO& a, const ROLE_INFO& b)
{
	return a.Dbid == b.Dbid && a.Name == b.Name && a.RoleType == b.RoleType && a.Data == b.Data;
};

class ROLE_LIST
{
public:
	TArray<ROLE_INFO> Value;

	ROLE_LIST():
	Value()
	{
	}

};

inline bool operator ==(const ROLE_LIST& a, const ROLE_LIST& b)
{
	return a.Value == b.Value;
};

class ROOM_INFO
{
public:
	uint64 RoomId;
	FString Name;

	ROOM_INFO():
	RoomId(0),
	Name()
	{
	}

};

inline bool operator ==(const ROOM_INFO& a, const ROOM_INFO& b)
{
	return a.RoomId == b.RoomId && a.Name == b.Name;
};

class ROOM_LIST
{
public:
	TArray<ROOM_INFO> Value;

	ROOM_LIST():
	Value()
	{
	}

};

inline bool operator ==(const ROOM_LIST& a, const ROOM_LIST& b)
{
	return a.Value == b.Value;
};

class ANIM_INFO
{
public:
	float Speed;
	float Direction;

	ANIM_INFO():
	Speed(0.0f),
	Direction(0.0f)
	{
	}

};

inline bool operator ==(const ANIM_INFO& a, const ANIM_INFO& b)
{
	return a.Speed == b.Speed && a.Direction == b.Direction;
};

class GOOD_INFO
{
public:
	uint8 BlockId;
	uint8 GoodId;
	uint8 Number;

	GOOD_INFO():
	BlockId(0),
	GoodId(0),
	Number(0)
	{
	}

};

inline bool operator ==(const GOOD_INFO& a, const GOOD_INFO& b)
{
	return a.BlockId == b.BlockId && a.GoodId == b.GoodId && a.Number == b.Number;
};

class BAG_INFO
{
public:
	TArray<GOOD_INFO> Value;

	BAG_INFO():
	Value()
	{
	}

};

inline bool operator ==(const BAG_INFO& a, const BAG_INFO& b)
{
	return a.Value == b.Value;
};

class SKILL_INFO
{
public:
	uint8 SkillId;
	FVector SpawnPos;
	FVector TargetPos;

	SKILL_INFO():
	SkillId(0),
	SpawnPos(),
	TargetPos()
	{
	}

};

inline bool operator ==(const SKILL_INFO& a, const SKILL_INFO& b)
{
	return a.SkillId == b.SkillId && a.SpawnPos == b.SpawnPos && a.TargetPos == b.TargetPos;
};

class CHAT_INFO
{
public:
	uint32 Index;
	FString Name;
	FString Date;
	FString Message;

	CHAT_INFO():
	Index(0),
	Name(),
	Date(),
	Message()
	{
	}

};

inline bool operator ==(const CHAT_INFO& a, const CHAT_INFO& b)
{
	return a.Index == b.Index && a.Name == b.Name && a.Date == b.Date && a.Message == b.Message;
};

class CHAT_LIST
{
public:
	TArray<CHAT_INFO> Value;

	CHAT_LIST():
	Value()
	{
	}

};

inline bool operator ==(const CHAT_LIST& a, const CHAT_LIST& b)
{
	return a.Value == b.Value;
};


}